package shroom.dkib.st;

import java.text.DateFormat;
import java.util.Date;

import ioio.lib.api.AnalogInput;
import ioio.lib.api.DigitalOutput;
import ioio.lib.api.IOIO;
import ioio.lib.api.exception.ConnectionLostException;
import ioio.lib.util.BaseIOIOLooper;
import ioio.lib.util.IOIOLooper;
import ioio.lib.util.android.IOIOActivity;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.TextView;
import android.widget.ToggleButton;

public class Main extends IOIOActivity{
	public ToggleButton switchTerminal1_;
	public ToggleButton switchTerminal2_;
	public ToggleButton switchTerminal3_;
	public ToggleButton switchLamp_;
	public ToggleButton switchAuto_;
	public TextView luxValue_;
	public TextView tempValue_;
	public TextView displayTime_;
	public TextView displayDate_;
	private final Handler mHandler;
	
	SharedPreferences sharedpreferences;
	
	private final Runnable mRunnable = new Runnable() {
        public void run() {
        	String currentDate = DateFormat.getDateInstance().format(new Date());
    		dateText(currentDate);
    		String currentTime = DateFormat.getTimeInstance(3).format(new Date());
    		timeText(currentTime);
    		
    		if(!(sharedpreferences.getInt("userHourValue", 0) == 0 && sharedpreferences.getInt("userHourValue", 0) == 0 && sharedpreferences.getInt("userHourValue", 0) == 0)) {
        		if(sharedpreferences.getBoolean("TimerStartSave", 0)) {
	            	pickerSec_.setValue(pickerSec_.getValue()-1);
	            	if(pickerSec_.getValue() == 0 && pickerMin_.getValue() == 0 && pickerHour_.getValue() == 0) {
	                	StartTimer_.performClick();
	                }
	            	else if(pickerSec_.getValue() == 59) {
	            		pickerMin_.setValue(pickerMin_.getValue()-1);
	            		if(pickerMin_.getValue() == 59) {
	                		pickerHour_.setValue(pickerHour_.getValue()-1);
	                	}
	            	}
	            }
        	}
    		
    		Editor editor = sharedpreferences.edit();
    	    editor.putBoolean("StartTimerSave", StartTimer_.isChecked());
            editor.putInt("userHourValue", pickerHour_.getValue());
            editor.putInt("userMinValue", pickerMin_.getValue());
            editor.putInt("userSecValue", pickerSec_.getValue());
            editor.commit();
            
            mHandler.postDelayed(mRunnable, 1000);
        }
    };
    
    public Main() {
        mHandler = new Handler();
    }

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		
		sharedpreferences = getSharedPreferences("MyPrefs", Context.MODE_PRIVATE);
		
		switchTerminal1_ = (ToggleButton) findViewById(R.id.Terminal1);
		switchTerminal2_ = (ToggleButton) findViewById(R.id.Terminal2);
		switchTerminal3_ = (ToggleButton) findViewById(R.id.Terminal3);
		switchLamp_ = (ToggleButton) findViewById(R.id.Lamp);
		switchAuto_ = (ToggleButton) findViewById(R.id.AutoMode);
		luxValue_ = (TextView) findViewById(R.id.LuxValue);
		tempValue_ = (TextView) findViewById(R.id.TempValue);
		displayTime_ = (TextView) findViewById(R.id.DisplayTime);
		displayDate_ = (TextView) findViewById(R.id.DisplayDate);
		
		startClock();
		enableUi(false);
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
	    inflater.inflate(R.menu.main_activity, menu);
	    return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	    switch (item.getItemId()) {

	        case R.id.action_timer:
	        	Intent intentTimer = new Intent(this, Timer.class);
	        	startActivity(intentTimer);
	        	return true;
		    
	    	case R.id.action_sensors:
	        	Intent intentSensors = new Intent(this, Sensors.class);
	        	startActivity(intentSensors);
	            return true;
	        	
	        case R.id.action_settings:
	        	Intent intentSettings = new Intent(this, Settings.class);
	        	startActivity(intentSettings);
	        	return true;
	        	
	        default:
	            return super.onOptionsItemSelected(item);
	    }
	}
	
	class Looper extends BaseIOIOLooper {
		public DigitalOutput led_;
		public DigitalOutput terminal1_;
		public DigitalOutput terminal2_;
		public DigitalOutput terminal3_;
		public DigitalOutput lamp_;
		public AnalogInput lux_;
		public AnalogInput temp_;
		
		@Override
		public void setup() throws ConnectionLostException {
			led_ = ioio_.openDigitalOutput(IOIO.LED_PIN, true);
			lamp_ = ioio_.openDigitalOutput(10, true);
			terminal1_ = ioio_.openDigitalOutput(9, true);
			terminal2_ = ioio_.openDigitalOutput(8, true);
			terminal3_ = ioio_.openDigitalOutput(7, true);
			lux_ = ioio_.openAnalogInput(40);
			temp_ = ioio_.openAnalogInput(39);
			enableUi(true);
		}

		@Override
		public void loop() throws ConnectionLostException, InterruptedException {
			float luxRead = lux_.read();
			luxRead = ((2500/luxRead) - 500);
			luxText(luxRead);
			
			float tempRead = temp_.read();
			tempRead = tempRead * 290;
			tempText(tempRead);
			
			if(!switchAuto_.isChecked()) {
				led_.write(!switchLamp_.isChecked());
				lamp_.write(switchLamp_.isChecked());
				terminal1_.write(switchTerminal1_.isChecked());
				terminal2_.write(switchTerminal2_.isChecked());
				terminal3_.write(switchTerminal3_.isChecked());
			}
			else {
				if(sharedpreferences.getBoolean("LightSensor1Save", false)) {
					if(luxRead < sharedpreferences.getInt("userLuxValue", 9000)) terminal1_.write(switchTerminal1_.isChecked());
					else terminal1_.write(!switchTerminal1_.isChecked());
				}
				if(sharedpreferences.getBoolean("LightSensor2Save", false)) {
					if(luxRead < sharedpreferences.getInt("userLuxValue", 9000)) terminal2_.write(switchTerminal2_.isChecked());
					else terminal2_.write(!switchTerminal2_.isChecked());
				}
				if(sharedpreferences.getBoolean("LightSensor3Save", false)) {
					if(luxRead < sharedpreferences.getInt("userLuxValue", 9000)) terminal3_.write(switchTerminal3_.isChecked());
					else terminal3_.write(!switchTerminal3_.isChecked());
				}
				if(sharedpreferences.getBoolean("LightSensor4Save", false)) {
					if(luxRead < sharedpreferences.getInt("userLuxValue", 9000)) {
						lamp_.write(switchLamp_.isChecked());
						led_.write(!switchLamp_.isChecked());
					}
					else {
						lamp_.write(!switchLamp_.isChecked());
						led_.write(switchLamp_.isChecked());
					}
				}
				else	led_.write(switchLamp_.isChecked());
				
				
				if(sharedpreferences.getBoolean("TempSensor1Save", false)) {
					if(tempRead > sharedpreferences.getInt("userTempValue", 30)) terminal1_.write(switchTerminal1_.isChecked());
					else terminal1_.write(!switchTerminal1_.isChecked());
				}
				if(sharedpreferences.getBoolean("TempSensor2Save", false)) {
					if(tempRead > sharedpreferences.getInt("userTempValue", 30)) terminal2_.write(switchTerminal2_.isChecked());
					else terminal2_.write(!switchTerminal2_.isChecked());
				}
				if(sharedpreferences.getBoolean("TempSensor3Save", false)) {
					if(tempRead > sharedpreferences.getInt("userTempValue", 30)) terminal3_.write(switchTerminal3_.isChecked());
					else terminal3_.write(!switchTerminal3_.isChecked());
				}
				if(sharedpreferences.getBoolean("TempSensor4Save", false)) {
					if(tempRead > sharedpreferences.getInt("userTempValue", 30)) {
						lamp_.write(switchLamp_.isChecked());
						led_.write(!switchLamp_.isChecked());
					}
					else {
						lamp_.write(!switchLamp_.isChecked());
						led_.write(switchLamp_.isChecked());
					}
				}
			}
			
			Thread.sleep(10);
		}

		@Override
		public void disconnected() {
			enableUi(false);
		}
	}

	@Override
	protected IOIOLooper createIOIOLooper() {
		return new Looper();
	}

	private void enableUi(final boolean enable) {
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				switchTerminal1_.setEnabled(enable);
				switchTerminal2_.setEnabled(enable);
				switchTerminal3_.setEnabled(enable);
				switchLamp_.setEnabled(enable);
				switchAuto_.setEnabled(enable);
			}
		});
	}
	
	private void startClock() {
        mHandler.post(mRunnable);
    }
	
	@SuppressLint("DefaultLocale")
	private void luxText(float f) {
		final String str = String.format("%.0f", f);
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				luxValue_.setText(str);
			}
		});
	}
	
	@SuppressLint("DefaultLocale")
	private void tempText(float f) {
		final String str = String.format("%.0f", f);
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				tempValue_.setText(str);
			}
		});
	}
	
	private void timeText(String s) {
		final String str = String.format("%s", s);
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				displayTime_.setText(str);
			}
		});
	}
	
	private void dateText(String s) {
		final String str = String.format("%s", s);
		runOnUiThread(new Runnable() {
			@Override
			public void run() {
				displayDate_.setText(str);
			}
		});
	}
	
}